/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ytclient;

import com.grack.nanojson.JsonArray;
import com.grack.nanojson.JsonObject;
import com.grack.nanojson.JsonWriter;
import org.schabi.newpipe.extractor.*;
import org.schabi.newpipe.extractor.downloader.Downloader;
import org.schabi.newpipe.extractor.exceptions.ExtractionException;
import org.apache.commons.validator.routines.UrlValidator;
import org.schabi.newpipe.extractor.search.SearchInfo;
import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeTrendingExtractor;
import org.schabi.newpipe.extractor.stream.StreamExtractor;
import org.schabi.newpipe.extractor.stream.StreamInfoItem;

import javax.annotation.Nullable;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import static ytclient.Serializer.*;

public class App {
    private static final int YOUTUBE_SERVICE_ID = 0;
    private static final UrlValidator urlValidator = new UrlValidator();
    private static Downloader downloader;
    private static StreamingService yt;

    private static void printUsage() {
        printUsage(null);
    }

    private static void printUsage(@Nullable String msg) {
      System.out.print("YTClient v0.0.1\n" +
              "Usage:\n" +
              "    ytclient <COMMAND> [ARG]\n" +
              "    ytclient trending\n" +
              "    ytclient <URL>\n" +
              "\n" +
              "ytclient trending        # return JSON for front page trending videos\n" +
              "ytclient <URL>           # return JSON for a single video\n" +
              "ytclient search <query>  # get search results for query in JSON\n" +
              "ytclient channel <URL>   # get JSON for a channel's homepage\n");
      if (msg != null) {
          System.out.println();
          System.out.println(msg);
      }
    }

    private static void init() {
        downloader = DownloaderImpl.init(null);
        NewPipe.init(downloader);
        try {
            yt = NewPipe.getService(YOUTUBE_SERVICE_ID);
        } catch (ExtractionException e) {
            printUsage("ERROR: Initialization Error");
            System.exit(1);
        }
    }

    private static void parseArgs(String[] args) {
        if (args.length < 1) {
            printUsage("ERROR: At least one argument required");
            System.exit(1);
        }

        if (args.length == 1) {
            final String arg = args[0];
            if (arg.equalsIgnoreCase("help")) {
                printUsage();
                System.exit(1);
            }
            if (!urlValidator.isValid(arg) && !arg.equalsIgnoreCase("trending")) {
                printUsage("ERROR: Single argument must be 'trending' or a valid URL");
                System.exit(1);
            } else if (urlValidator.isValid(arg)) {
                try {
                    video(new URL(arg));
                    System.exit(0);
                } catch (MalformedURLException e) {
                    printUsage("ERROR: URL parsing error");
                    System.exit(1);
                }
            } else if (arg.equalsIgnoreCase("trending")) {
                trending();
                System.exit(0);
            }
        }

        if (args.length > 2) {
            printUsage("ERROR: Too many arguments");
            System.exit(1);
        }

        if (args[0].equalsIgnoreCase("search")) {
            search(args[1]);
            System.exit(0);
        } else if (args[0].equalsIgnoreCase("channel")) {
            URL url;
            if (!urlValidator.isValid(args[1])) {
                try {
                    url = new URL(args[1]);
                    channel(url);
                    System.exit(0);
                } catch (MalformedURLException e) {
                    printUsage("ERROR: Invalid channel URL");
                    System.exit(1);
                }
            }
        }
    }

    public static void main(String[] args) {
        init();
        parseArgs(args);
        printUsage("ERROR: Invalid arguments");
        System.exit(1);
    }

    static void search(String query) {
        SearchInfo si = null;
        try {
            si = SearchInfo.getInfo(yt, yt.getSearchQHFactory().fromQuery(query));
        } catch (ExtractionException | IOException e) {
            printUsage("ERROR: Search exception");
        }
        assert si != null;
        List<InfoItem> relatedItems = si.getRelatedItems();
        JsonArray jsonArray = new JsonArray();
        infoItemsToJsonArray(jsonArray, relatedItems);
        System.out.println(JsonWriter.string(jsonArray));
    }

    static void trending() {
        YoutubeTrendingExtractor trendingExtractor = null;
        try {
            trendingExtractor = (YoutubeTrendingExtractor) yt.getKioskList().getDefaultKioskExtractor();
            trendingExtractor.onFetchPage(downloader);
            List<StreamInfoItem> items = trendingExtractor.getInitialPage().getItems();
            JsonArray trendingArray = new JsonArray();
            infoItemsToJsonArray(trendingArray, items);
            System.out.println(JsonWriter.string(trendingArray));
        } catch (ExtractionException | IOException e) {
            printUsage("ERROR: Failed to extract Trending data");
            System.exit(1);
        }
    }

    static void video(URL url) {
        try {
            StreamExtractor streamExtractor = yt.getStreamExtractor(String.valueOf(url));
            streamExtractor.fetchPage();
            JsonObject jsonStream = new JsonObject();
            streamExtractorToJsonObject(jsonStream, streamExtractor);
            System.out.println(JsonWriter.string(jsonStream));
        } catch (ExtractionException e) {
            printUsage("ERROR: Failed to extract video data");
            System.exit(1);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    static void channel(URL url) {
        // TODO
    }
}
